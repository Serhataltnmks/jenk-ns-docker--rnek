pipeline {
    agent any
    
    environment {
        DOCKER_CREDENTIALS_ID = 'your-docker-credentials-id' // Docker için kimlik bilgileri varsa
        DOCKER_REGISTRY = 'your-docker-registry-url' // Docker Registry URL'si (örnek: 'registry.hub.docker.com')
        SONARQUBE_ENV = 'SonarQube Server' // SonarQube sunucu adı
        JAVA_HOME = '/usr/lib/jvm/java-17-openjdk-amd64' // Java 17'nin yüklü olduğu dizin
        PATH = "${env.JAVA_HOME}/bin:${env.PATH}"
    }

    stages {
        stage('Clone Repository') {
            steps {
                git url: 'https://gitlab.com/serhataltnmks/my-microservices-project.git', branch: 'main'
            }
        }
        
        stage('Build User Service') {
            steps {
                dir('user-service') {
                    script {
                        docker.build("user-service:${env.BUILD_ID}")
                    }
                }
            }
        }
        
        stage('Build Product Service') {
            steps {
                dir('product-service') {
                    script {
                        docker.build("product-service:${env.BUILD_ID}")
                    }
                }
            }
        }
        
        stage('Build Order Service') {
            steps {
                dir('order-service') {
                    script {
                        docker.build("order-service:${env.BUILD_ID}")
                    }
                }
            }
        }
        
        stage('Build API Gateway') {
            steps {
                dir('api-gateway') {
                    script {
                        docker.build("api-gateway:${env.BUILD_ID}")
                    }
                }
            }
        }
        
        stage('Run SonarQube Analysis') {
            steps {
                withSonarQubeEnv('SonarQube Server') {
                    sh '''
                        export JAVA_HOME=/usr/lib/jvm/java-17-openjdk-amd64
                        export PATH=$JAVA_HOME/bin:$PATH
                        /opt/sonar-scanner/bin/sonar-scanner
                    '''
                }
            }
        }
        
        stage('Quality Gate') {
            steps {
                timeout(time: 1, unit: 'HOURS') {
                    waitForQualityGate abortPipeline: true
                }
            }
        }
        
        stage('Deploy') {
            when {
                expression {
                    return currentBuild.result == null || currentBuild.result == 'SUCCESS'
                }
            }
            steps {
                echo 'Deploying application...'
                // Burada deploy işlemi için gerekli komutlar eklenebilir
            }
        }
    }

    post {
        always {
            echo 'Pipeline complete, cleaning up...'
        }
        failure {
            echo 'Pipeline failed!'
        }
    }
}
