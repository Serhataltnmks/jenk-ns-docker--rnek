pipeline {
    agent any

    environment {
        // Java 17'yi kullanacak şekilde JAVA_HOME'u ayarlıyoruz
        JAVA_HOME = '/usr/lib/jvm/java-17-openjdk-amd64'
        PATH = "${JAVA_HOME}/bin:${env.PATH}"
    }

    stages {
        stage('Clone Repository') {
            steps {
                git 'https://gitlab.com/serhataltnmks/my-microservices-project.git'
            }
        }
        stage('Build User Service') {
            steps {
                dir('user-service') {
                    sh 'docker build -t user-service:latest .'
                }
            }
        }
        stage('Build Product Service') {
            steps {
                dir('product-service') {
                    sh 'docker build -t product-service:latest .'
                }
            }
        }
        stage('Build Order Service') {
            steps {
                dir('order-service') {
                    sh 'docker build -t order-service:latest .'
                }
            }
        }
        stage('Build API Gateway') {
            steps {
                dir('api-gateway') {
                    sh 'docker build -t api-gateway:latest .'
                }
            }
        }
        stage('Run SonarQube Analysis') {
            steps {
                withSonarQubeEnv('SonarQube Server') {
                    sh '/opt/sonar-scanner/bin/sonar-scanner'
                }
            }
        }
        stage('Quality Gate') {
            steps {
                timeout(time: 1, unit: 'HOURS') {
                    waitForQualityGate abortPipeline: true
                }
            }
        }
    }

    post {
        always {
            echo 'Pipeline complete, cleaning up...'
        }
        failure {
            echo 'Pipeline failed!'
        }
    }
}
