<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Chess Game</title>
    <style>
        body {
            font-family: Arial, sans-serif;
            text-align: center;
        }
        #chessboard {
            display: grid;
            grid-template-columns: repeat(8, 50px);
            grid-template-rows: repeat(8, 50px);
            width: 400px;
            height: 400px;
            margin: 20px auto;
            border: 2px solid black;
            box-shadow: 0 0 10px rgba(0, 0, 0, 0.5);
        }
        .cell {
            display: flex;
            align-items: center;
            justify-content: center;
            width: 50px;
            height: 50px;
            border: 1px solid #333;
        }
        .cell:nth-child(even) {
            background-color: #b58863;
        }
        .cell:nth-child(odd) {
            background-color: #f0d9b5;
        }
        .white-piece, .black-piece {
            width: 45px;
            height: 45px;
        }
    </style>
</head>
<body>
    <h1>Chess Game</h1>
    <div id="chessboard"></div>
    <button onclick="startGame()">Start Game</button>
    <script>
        const chessboard = document.getElementById('chessboard');
        const initialBoard = [
            ["white-rook", "white-knight", "white-bishop", "white-queen", "white-king", "white-bishop", "white-knight", "white-rook"],
            ["white-pawn", "white-pawn", "white-pawn", "white-pawn", "white-pawn", "white-pawn", "white-pawn", "white-pawn"],
            ["", "", "", "", "", "", "", ""],
            ["", "", "", "", "", "", "", ""],
            ["", "", "", "", "", "", "", ""],
            ["", "", "", "", "", "", "", ""],
            ["black-pawn", "black-pawn", "black-pawn", "black-pawn", "black-pawn", "black-pawn", "black-pawn", "black-pawn"],
            ["black-rook", "black-knight", "black-bishop", "black-queen", "black-king", "black-bishop", "black-knight", "black-rook"]
        ];

        let currentPlayer = 'white'; // Beyaz başlar
        let selectedPiece = null;
        let selectedCell = null;

        function startGame() {
            makePiecesDraggable();
        }

        function createBoard() {
            chessboard.innerHTML = ''; // Tahtayı temizle ve yeniden oluştur

            for (let row = 0; row < 8; row++) {
                for (let col = 0; col < 8; col++) {
                    const cell = document.createElement('div');
                    cell.classList.add('cell');
                    cell.setAttribute('data-row', row);
                    cell.setAttribute('data-col', col);

                    const piece = initialBoard[row][col];
                    if (piece) {
                        const pieceElement = document.createElement('img');
                        pieceElement.src = `/images/${piece}.png`;
                        pieceElement.classList.add(piece.includes('white') ? 'white-piece' : 'black-piece');
                        pieceElement.setAttribute('data-piece', piece);
                        cell.appendChild(pieceElement);
                    }

                    chessboard.appendChild(cell);
                }
            }
        }

        function makePiecesDraggable() {
            const cells = document.querySelectorAll('.cell');

            cells.forEach(cell => {
                cell.addEventListener('click', () => {
                    const pieceElement = cell.querySelector('img');

                    if (selectedPiece) {
                        const targetPiece = cell.querySelector('img');

                        if (isValidMove(selectedPiece.getAttribute('data-piece'), selectedCell, cell, targetPiece)) {
                            cell.innerHTML = ''; // Hedef hücreyi temizle
                            cell.appendChild(selectedPiece);
                            switchPlayer();
                        } else {
                            selectedCell.appendChild(selectedPiece); // Geçersiz hamle, taşı geri koy
                        }

                        selectedPiece = null;
                        selectedCell = null;
                    } else if (pieceElement && pieceElement.getAttribute('data-piece').includes(currentPlayer)) {
                        selectedPiece = pieceElement;
                        selectedCell = cell;
                        selectedPiece = selectedCell.removeChild(selectedPiece); // Taşı hücreden çıkar
                    }
                });
            });
        }

        function isValidMove(piece, startCell, targetCell, targetPiece) {
            const pieceType = piece.split('-')[1];
            const startRow = parseInt(startCell.getAttribute('data-row'));
            const startCol = parseInt(startCell.getAttribute('data-col'));
            const endRow = parseInt(targetCell.getAttribute('data-row'));
            const endCol = parseInt(targetCell.getAttribute('data-col'));

            if (targetPiece && targetPiece.getAttribute('data-piece').includes(currentPlayer)) {
                return false; // Kendi taşını yiyemezsin
            }

            switch (pieceType) {
                case 'pawn':
                    return isValidPawnMove(startRow, startCol, endRow, endCol, piece, targetPiece);
                case 'rook':
                    return isValidRookMove(startRow, startCol, endRow, endCol);
                case 'knight':
                    return isValidKnightMove(startRow, startCol, endRow, endCol);
                case 'bishop':
                    return isValidBishopMove(startRow, startCol, endRow, endCol);
                case 'queen':
                    return isValidQueenMove(startRow, startCol, endRow, endCol);
                case 'king':
                    return isValidKingMove(startRow, startCol, endRow, endCol);
                default:
                    return false;
            }
        }

        function switchPlayer() {
            currentPlayer = currentPlayer === 'white' ? 'black' : 'white';
        }

        function isValidPawnMove(startRow, startCol, endRow, endCol, piece, targetPiece) {
            const direction = piece.includes('white') ? -1 : 1; // Beyaz yukarı (negatif), siyah aşağı (pozitif)
            const startRowForPawn = piece.includes('white') ? 6 : 1;

            // Düz hareket
            if (startCol === endCol) {
                if (startRow + direction === endRow && !targetPiece) return true;
                if (startRow === startRowForPawn && startRow + 2 * direction === endRow && !targetPiece) return true;
            }

            // Çapraz hareket
            if (Math.abs(startCol - endCol) === 1 && startRow + direction === endRow && targetPiece) {
                return true;
            }

            return false;
        }

        function isValidRookMove(startRow, startCol, endRow, endCol) {
            if (startRow !== endRow && startCol !== endCol) return false;

            // Arada taş var mı kontrol et
            if (startRow === endRow) {
                const step = startCol < endCol ? 1 : -1;
                for (let col = startCol + step; col !== endCol; col += step) {
                    if (document.querySelector(`[data-row="${startRow}"][data-col="${col}"]`).innerHTML !== '') return false;
                }
            } else {
                const step = startRow < endRow ? 1 : -1;
                for (let row = startRow + step; row !== endRow; row += step) {
                    if (document.querySelector(`[data-row="${row}"][data-col="${startCol}"]`).innerHTML !== '') return false;
                }
            }

            return true;
        }

        function isValidKnightMove(startRow, startCol, endRow, endCol) {
            const rowDiff = Math.abs(startRow - endRow);
            const colDiff = Math.abs(startCol - endCol);
            return (rowDiff === 2 && colDiff === 1) || (rowDiff === 1 && colDiff === 2);
        }

        function isValidBishopMove(startRow, startCol, endRow, endCol) {
            if (Math.abs(startRow - endRow) !== Math.abs(startCol - endCol)) return false;

            const rowStep = startRow < endRow ? 1 : -1;
            const colStep = startCol < endCol ? 1 : -1;
            let row = startRow + rowStep;
            let col = startCol + colStep;

            while (row !== endRow && col !== endCol) {
                if (document.querySelector(`[data-row="${row}"][data-col="${col}"]`).innerHTML !== '') return false;
                row += rowStep;
                col += colStep;
            }

            return true;
        }

        function isValidQueenMove(startRow, startCol, endRow, endCol) {
            // Vezir, hem kale hem de fil gibi hareket edebilir
            return isValidRookMove(startRow, startCol, endRow, endCol) || isValidBishopMove(startRow, startCol, endRow, endCol);
        }

        function isValidKingMove(startRow, startCol, endRow, endCol) {
            const rowDiff = Math.abs(startRow - endRow);
            const colDiff = Math.abs(startCol - endCol);

            // Şah, her yönde sadece bir kare hareket edebilir
            return rowDiff <= 1 && colDiff <= 1;
        }

        createBoard();
    </script>
</body>
</html>
